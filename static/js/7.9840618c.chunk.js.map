{"version":3,"sources":["views/IngredientDetailPage/index.tsx","client/useCocktailDBClient.tsx"],"names":["IngredientDetailPage","params","useParams","useEffect","fetchIngredientDetailsByName","name","cocktailClient","useCocktailDBClient","useState","ingredient","setIngredient","a","getIngredientByName","console","log","error","className","strIngredient","strABV","src","replace","alt","strDescription","to","getBaseClient","axios","create","baseURL","getAll","url","method","res","data","drinks","getByName","search","s","getByFirstLetter","firstLetter","f","getRandomCocktail","getCocktailDetails","id","i","ingredients"],"mappings":"2QAQe,SAASA,IACpB,IAAMC,EAASC,cAEfC,qBAAU,WACNC,EAA6BH,EAAOI,QAErC,CAACJ,EAAOI,OAEX,IAAMC,EAAiBC,cARoB,EASPC,qBATO,mBASpCC,EAToC,KASxBC,EATwB,KAWrCN,EAA4B,uCAAG,WAAOC,GAAP,eAAAM,EAAA,+EAEJL,EAAeM,oBAAoBP,GAF/B,OAEvBI,EAFuB,OAG7BI,QAAQC,IAAIL,EAAY,2BACxBC,EAAcD,GAJe,gDAO7BI,QAAQE,MAAR,MAP6B,yDAAH,sDAWlC,OAAO,sBAAKC,UAAU,kBAAf,WAEDP,GAAc,4DAChB,sBAAKO,UAAU,OAAf,UACI,oCAAKP,QAAL,IAAKA,OAAL,EAAKA,EAAYQ,iBACN,OAAVR,QAAU,IAAVA,OAAA,EAAAA,EAAYS,SAAU,8CAAUT,QAAV,IAAUA,OAAV,EAAUA,EAAYS,UAE7C,qBAAKC,IAAK,oDAAsDlB,EAAOI,KAAKe,QAAQ,IAAK,OAAS,OAAQC,IAAI,iBAC7G,OAACZ,QAAD,IAACA,OAAD,EAACA,EAAYa,iBAAkB,iFAChC,sCAAOb,QAAP,IAAOA,OAAP,EAAOA,EAAYa,oBAEvB,qBAAKN,UAAU,cAAf,SACI,eAAC,IAAD,CAAMO,GAAG,IAAT,cAAc,sE,gHCqBX,SAAShB,IAEpB,IAAMiB,EAAgB,WAClB,OAAOC,IAAMC,OAAO,CAChBC,QAAS,iDAIXC,EAAM,uCAAG,4BAAAjB,EAAA,sEACOa,IAAgB,CAC9BK,IAAK,gBACLC,OAAQ,QAHD,cACLC,EADK,yBAKJA,EAAIC,KAAKC,QALL,2CAAH,qDAkFZ,MAAO,CACHC,UA5EW,uCAAG,WAAOC,GAAP,eAAAxB,EAAA,+EAEQa,IAAgB,CAC9BK,IAAK,aACL5B,OAAQ,CACJmC,EAAGD,KALD,cAEJJ,EAFI,yBAQHA,EAAIC,KAAKC,QARN,sCAWVpB,QAAQE,MAAR,MAXU,8DAAH,sDA6EXsB,iBA7DkB,uCAAG,WAAOC,GAAP,eAAA3B,EAAA,+EAECa,IAAgB,CAC9BK,IAAK,aACL5B,OAAQ,CACJsC,EAAGD,KALM,cAEXP,EAFW,yBASVA,EAAIC,KAAKC,QATC,sCAYjBpB,QAAQE,MAAR,MAZiB,8DAAH,sDA8DlBa,SACAY,kBA/CmB,uCAAG,4BAAA7B,EAAA,+EAEAa,IAAgB,CAC9BK,IAAK,eAHS,cAEZE,EAFY,yBAKXA,EAAIC,KAAKC,OAAO,IALL,sCAOlBpB,QAAQE,MAAR,MAPkB,8DAAH,qDAgDnB0B,mBApCoB,uCAAG,WAAOC,GAAP,mBAAA/B,EAAA,+EAEDa,IAAgB,CAC9BK,IAAK,aACL5B,OAAQ,CACJ0C,EAAGD,KALQ,cAEbX,EAFa,mCAQZA,EAAIC,YARQ,iBAQZ,EAAUC,cARE,aAQZ,EAAmB,IARP,sCAUnBpB,QAAQE,MAAR,KAAmB,CAAE2B,OAVF,8DAAH,sDAqCpB9B,oBAtBqB,uCAAG,WAAOP,GAAP,mBAAAM,EAAA,+EAGFa,IAAgB,CAC9BK,IAAK,aACL5B,OAAQ,CACJ0C,EAAGtC,KANS,cAGd0B,EAHc,mCASbA,EAAIC,YATS,iBASb,EAAUY,mBATG,aASb,EAAwB,IATX,sCAYpB/B,QAAQE,MAAR,KAAmB,CAAEV,SAZD,8DAAH","file":"static/js/7.9840618c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport useCocktailDBClient, { IIngredient } from \"../../client/useCocktailDBClient\";\nimport { useParams } from \"react-router\";\nimport Navbar from \"../../theme/Navbar\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\"\n\n\nexport default function IngredientDetailPage() {\n    const params = useParams<{ name: string }>()\n\n    useEffect(() => {\n        fetchIngredientDetailsByName(params.name)\n\n    }, [params.name]);\n\n    const cocktailClient = useCocktailDBClient()\n    const [ingredient, setIngredient] = useState<IIngredient>()\n\n    const fetchIngredientDetailsByName = async (name: string) => {\n        try {\n            const ingredient = await cocktailClient.getIngredientByName(name)\n            console.log(ingredient, \"search by nameeeeeeeeee\")\n            setIngredient(ingredient)\n\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    return <div className=\"ingredient-page\">\n\n        {!ingredient && <p>Sorry, there are no details</p>}\n        <div className=\"card\">\n            <h2>{ingredient?.strIngredient}</h2>\n            {ingredient?.strABV && <h3>ABV: {ingredient?.strABV}</h3>}\n\n            <img src={\"https://www.thecocktaildb.com/images/ingredients/\" + params.name.replace(\"_\", \"%20\") + \".png\"} alt=\"ingredient\"></img>\n            {!ingredient?.strDescription && <span>Sorry, no description available for this item</span>}\n            <span>{ingredient?.strDescription}</span>\n        </div>\n        <div className=\"btn-wrapper\">\n            <Link to=\"/\"> <button>Go Home, you're drunk!</button></Link>\n        </div>\n\n    </div>\n}\n","import React from \"react\"\nimport axios, { AxiosInstance } from \"axios\"\n\nexport interface ICocktail {\n    dateModified: string | Date;\n    idDrink: string;\n    strAlcoholic: string;\n    strCategory: string;\n    strCreativeCommonsConfirmed: string;\n    strDrink: string;\n    strDrinkAlternate: string;\n    strDrinkThumb: string;\n    strGlass: string;\n    strIBA: string;\n    strImageAttribution: string;\n    strImageSource: string;\n    strIngredient1: string;\n    strIngredient2: string;\n    strIngredient3: string;\n    strIngredient4: string;\n    strIngredient5: string;\n    strIngredient6: string;\n    strIngredient7: string;\n    strIngredient8: string;\n    strIngredient9: string;\n    strIngredient10: string;\n    strIngredient11: string;\n    strIngredient12: string;\n    strIngredient13: string;\n    strIngredient14: string;\n    strIngredient15: string;\n    strInstructions: string;\n    strInstructionsDE: string;\n    strInstructionsES: string;\n    strInstructionsFR: string;\n    strInstructionsIT: string;\n    strMeasure1: string;\n    strMeasure2: string;\n    strMeasure3: string;\n    strMeasure4: string;\n    strMeasure5: string;\n    strMeasure6: string;\n    strMeasure7: string;\n    strMeasure8: string;\n    strMeasure9: string;\n    strMeasure10: string;\n    strMeasure11: string;\n    strMeasure12: string;\n    strMeasure13: string;\n    strMeasure14: string;\n    strMeasure15: string;\n    strTags: string;\n    strVideo: null;\n}\n\nexport interface IIngredient {\n    idIngredient: string,\n    strIngredient: string,\n    strDescription: string,\n    strType: string,\n    strAlcohol: string,\n    strABV: string\n}\nexport default function useCocktailDBClient() {\n\n    const getBaseClient = (): AxiosInstance => {\n        return axios.create({\n            baseURL: \"https://www.thecocktaildb.com/api/json/v1/1\"\n        })\n    }\n\n    const getAll = async (): Promise<ICocktail[]> => {\n        const res = await getBaseClient()({\n            url: \"search.php?s=\",\n            method: \"GET\",\n        });\n        return res.data.drinks as ICocktail[]\n    }\n    const getByName = async (search: string): Promise<ICocktail[]> => {\n        try {\n            const res = await getBaseClient()({\n                url: \"search.php\",\n                params: {\n                    s: search\n                }\n            });\n            return res.data.drinks as ICocktail[]\n\n        } catch (err) {\n            console.error(err);\n            throw err\n        }\n    }\n\n    const getByFirstLetter = async (firstLetter: string): Promise<ICocktail[]> => {\n        try {\n            const res = await getBaseClient()({\n                url: \"search.php\",\n                params: {\n                    f: firstLetter\n                }\n            });\n\n            return res.data.drinks as ICocktail[]\n\n        } catch (err) {\n            console.error(err);\n            throw err\n        }\n    }\n    const getRandomCocktail = async (): Promise<ICocktail> => {\n        try {\n            const res = await getBaseClient()({\n                url: \"random.php\",\n            })\n            return res.data.drinks[0] as ICocktail\n        } catch (err) {\n            console.error(err);\n            throw err\n        }\n    }\n\n    const getCocktailDetails = async (id: string): Promise<ICocktail | undefined> => {\n        try {\n            const res = await getBaseClient()({\n                url: \"lookup.php\",\n                params: {\n                    i: id\n                }\n            })\n            return res.data?.drinks?.[0] as ICocktail\n        } catch (err) {\n            console.error(err, { id });\n            throw err\n        }\n    }\n\n    const getIngredientByName = async (name: string): Promise<IIngredient | undefined> => {\n\n        try {\n            const res = await getBaseClient()({\n                url: \"search.php\",\n                params: {\n                    i: name\n                }\n            })\n            return res.data?.ingredients?.[0] as IIngredient\n\n        } catch (err) {\n            console.error(err, { name });\n            throw err\n        }\n    }\n    return {\n        getByName,\n        getByFirstLetter,\n        getAll,\n        getRandomCocktail,\n        getCocktailDetails,\n        getIngredientByName\n    }\n\n}"],"sourceRoot":""}